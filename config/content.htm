<h1>weeks</h1>
<h2>week2-5</h2>
<p>week2</p>
<p>1. 在github裡面創一倉儲，名子命名為cad2019並將lnitiulize this repository with a README打勾。</p>
<p>2. 下載本課程的可攜套件 (2019full可攜套件下載本課程的可攜套件 (2019full可攜套件.7z)，因本檔案大於5G須先把隨身碟格式化成NTFS。</p>
<p>3. 打開start mdecourse.bat -&gt; cd到tmp資料夾 <span>-&gt;git clone 下載自己的倉儲 ( 因原先tmp 已有一個 cad2019，因此我改名子成 aaa )</span>  ，如果在學校要記得把proxy位置改成［2001；288；6004；17；；17］port = 3128，在家則在前方打上#關閉此設定。</p>
<p>4. 這學期的近端指吝有所更動需用 git submodule add<span> </span><a href="http://github.com/mdecourse/cmsimde.git">http://github.com/mdecourse/cmsimde.git</a> cmsimde的指令下載更新。</p>
<p>5. 打開資料夾 <span>-&gt; 進入cmsimde -&gt; 進入up_dir -&gt; 用 Ctrl+A 打檔案全選在 Ctrl+C 複製 <span>-&gt;回到資料夾貼上。</span></span></p>
<p><span>6. 先進入 cd cmsimde  <span>-&gt; 再開啟近端動態 python wsgi.py。</span></span></p>
<p><span><span>7. 打開瀏覽器輸入 httpa://127.0.0.1:9443/ 進入近端  <span>-&gt; 輸入密碼 admin 然後login 開始修改。</span></span></span></p>
<p><span><span>影片請開 youtube  C C  字幕 </span></span></p>
<p><span><span></span></span></p>
<p><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kl7GmUJVFwo" width="560"></iframe></span></span></p>
<p>week3</p>
<div><span>1. 進入Y曹 /進入 portablegit /進入 bin  的 sh.exe 改成 sh_rename_for_solvespace.exe。</span></div>
<div><span></span></div>
<div><span></span></div>
<div><span><span>2. 到tmp底下git clone下載 --recurse-submodules</span></span></div>
<div><span><span>https://github.com/solvespace/solvespace.git 。</span></span></div>
<div><span><span></span></span></div>
<div><span><span></span></span></div>
<div><span><span>3. 進入tmp底下的 solvespace 進入 extlib 進入 angle 進入 CMakeLists.txt。</span></span></div>
<div><span><span></span></span></div>
<div><span><span></span></span></div>
<div><span><span>4 . 將 CMakeLists.txt 中的第713 and 714行前面加上#來關閉。</span></span></div>
<div><span><span></span></span></div>
<div><span><span></span></span></div>
<div><span><span>5. </span>cd solvespace  <span>-&gt;<span> </span></span><span> </span>cd extlib  <span>-&gt;<span> </span></span><span> </span>cd libpng   輸入指令 <span>mkdir build<span> </span><span>  </span><span>-&gt;<span> </span></span> 在 cd build。</span></span></div>
<div><span><span></span></span></div>
<div><span><span></span></span></div>
<div><span><span>6.  輸入指令cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ，再輸入指令 mingw32-make 。</span></span></div>
<div><span><span></span></span></div>
<div><span><span></span></span></div>
<div><span><span>7.  </span>把 libpng.dll.a 改名為 libpng_static.a 並放到 Y:/msys64\mingw64\lib。</span></div>
<div><span></span></div>
<div><span></span></div>
<div><span>8. 輸入指令 cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release  ，再輸入指令mingw32-make。</span></div>
<div><span></span></div>
<div><span></span></div>
<div><span></span></div>
<div><span>影片請開 youtube  C C  字幕</span></div>
<div><span></span></div>
<div><span></span></div>
<div><span></span></div>
<div><span></span></div>
<div><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HiNGialkwbY" width="560"></iframe></span></div>
<p>week4</p>
<p>完成 week2 和 week3</p>
<p>week5</p>
<p>1. 到老師的電腦輔助設計實習課程網頁，進入 task1 的 solvespace 操作，去選擇自己的題目練習</p>
<p>2. 依照題目開始用<span> solvespace  練習繪圖</span></p>
<p>3. 把草圖擠製成3D</p>
<p>4開始約束零件和零件間的運動軌跡</p>
<p>-----------------</p>
<p>本題快捷鍵</p>
<p>導圓角  shift + A</p>
<p>尺寸標註 D</p>
<p>角度標註 N</p>
<p>建立新草圖  <span> shift + W</span></p>
<p><span>擠製  shift + X</span></p>
<p><span>開啟檔案 shift + I</span></p>
<p><span> 回覆上一個步驟  ctrl + Z</span></p>
<p><span>虛線  G</span></p>
<p><span>完成圖</span></p>
<p><iframe height="480" src="/downloads/Clip.html" width="640"><iframe>
<p></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QMhkLkceaJ0" width="560"></iframe></span></p></iframe></iframe></p>
<p></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QMhkLkceaJ0" width="560"></iframe></p>
<h2>week6-9</h2>
<p>week6</p>
<p><span>任務一參數化零組件繪製</span></p>
<p><span>1. 利用 Solvespace 繪製車殼</span></p>
<p><span>2. 利用 Solvespace 繪製心軸</span></p>
<p><span>3. 利用 Solvespace 繪製輪子</span></p>
<p><span>4. 利用 Solvespace 限制和拘束個個零件的活動</span></p>
<p><span></span>完成圖</p>
<p><iframe height="480" src="/downloads/untitled.html" width="640"></iframe></p>
<p><span></span></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xd4JKUJL94o" width="560"></iframe></span></p>
<p></p>
<p><span>網際 V-rep 模型控制</span></p>
<p>1.到老師的網站下載 <a href="https://drive.google.com/file/d/1cZFSsLEoGOBYojzKzFEf4YH2l--pbS-9/view?usp=sharing">V-rep 3.6.1 rev 4.7z</a><span>  和 <a href="https://github.com/mdecourse/mocad/files/3583773/web_vrep2.zip">web_vrep2.zip</a><span> </span></span></p>
<p><span><span>2. 用 regedit 指令打開登入編輯程式</span></span></p>
<p>3. 用 ctrl +F  搜尋 .py 的程式並把他刪除</p>
<p>4. 開啟 vrep 並開起車子的檔案</p>
<p>5. 在編譯器裡開起 app.py 並執行</p>
<p>6. 複製 http://127.0.0.1:5000/  並用瀏覽器開啟</p>
<p>7. 開始操縱車子</p>
<p></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/LcJgweeD1vQ" width="560"></iframe></p>
<p>week7</p>
<p><span>在solvespace的about內容加入學號</span></p>
<p><span></span></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9jEx6sS04-w" width="560"></iframe></p>
<p></p>
<p><span>solvespace繪圖 11</span></p>
<p><span></span></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/93AZTBfRqo8" width="560"></iframe></p>
<p></p>
<p>week8</p>
<p>1. 啟用網誌系統</p>
<p>2. 開啟 leo 檔</p>
<p>3. 將自己倉儲 configxu32k7 pelican.leo  丟入編譯器</p>
<p>4. 複製個人 blog 的網址並貼到遠端中的 siteurl</p>
<p>5. 將 Disqus sitename裡的文字串改為 s40723237 cad2019</p>
<p>6. 在 local blog  點選右鍵，選 goto script</p>
<p>7. 複製產生的文字串，並貼到命令提示字元啟動他</p>
<p></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ohml8Dl6VYY" width="560"></iframe></p>
<h2>week10-14</h2>
<p>week11</p>
<p>nx 繪圖練習</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/BererErCwgc" width="560"></iframe></p>
<p>week 12</p>
<p>nx 第六章操作 模型組合和爆炸圖</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/3auVIq__zzA" width="560"></iframe></p>
<p>week13</p>
<p>week13個人報告</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YUcpUfjFbu0" width="560"></iframe></p>
<p></p>
<h2>week15</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0_W8dkp33pg" width="560"></iframe></p>
<p>week16</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/H01SyMo6nKs" width="560"></iframe></p>
<h1>week17</h1>
<p>week17協同任務</p>
<ul>
<li><strong>respondable or non-respondable</strong>: a respondable shape will cause a collision reaction with other respondable shapes. They (and/or) their collider, will be influenced in their movement if they are dynamic. On the other hand, non-respondable shapes will not compute a collision response if they collide with other shapes.</li>
</ul>
<p> </p>
<ul>
<li><strong>可回應或不可回應</strong>：回應形狀會導致與其他可回應形狀發生碰撞反應。它們（和/或）碰撞器，如果他們是動態的，就會影響它們的運動。另一方面，如果不可回應的形狀與其他形狀碰撞，則它們不會計算碰撞回應。</li>
</ul>
<p>Above two points are illustrated <a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#staticAndRespondable">here</a>. Respondable shapes should be as simple as possible, in order to allow for a fast and stable simulation. A physics engine will be able to simulate following 5 types of shapes with various degrees of speed and stability:</p>
<p> </p>
<p>上圖所示。回應形狀應盡可能簡單，以便快速、穩定地模擬。物理引擎將能夠類比以下 5 種具有不同速度和穩定性的形狀：</p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#pureShapes"><strong>Pure shapes</strong></a></span><strong>:</strong>a pure shape will be stable and handled very efficiently by the physics engine. The draw-back is that pure shapes are limited in geometry: mostly cuboids, cylinders and spheres. If possible, use those for items that are in contact with other items for a longer time (e.g. the feet of a humanoid robot, the base of a serial manipulator, the fingers of a gripper, etc.). Pure shapes can be created with [Menu bar --&gt; Add --&gt; Primitive shape].</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#pureShapes"><strong><span>純形狀</span></strong></a></span><strong>：</strong>純形狀將穩定，物理引擎處理效率很高。回拉是純形狀在幾何中是有限的：主要是立方體、圓柱體和球體。如果可能，將這些物品用於與其他物品接觸更長時間的物品（例如類人機器人的腳、串列操縱器的底座、夾持器的手指等）。可以使用 [功能表列 -- &gt; 添加 -gt; 原始形狀]創建純形狀。</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#pureShapes"><strong>Pure compound shapes</strong></a></span><strong>:</strong>a pure compound shape is a grouping of several pure shapes. It performs almost as well as pure shapes and shares similar properties. Pure compound shapes can be generated by grouping several pure shapes [Menu bar --&gt; Edit --&gt; Grouping/Merging --&gt; Group selected shapes].</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#pureShapes"><strong><span>純複合形狀</span></strong></a></span><strong>：</strong>純複合形狀是幾個純形狀的組合。它的性能幾乎與純形狀相同，並且具有相似的屬性。純複合形狀可以通過分組多個純形狀生成<span> </span><span>[</span>功能表條 -- &gt; 編輯 --&gt; 分組/合併 -- &gt; 組選定形狀]。</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#convexShapes"><strong>Convex shapes</strong></a></span>: a convex shape will be a little bit less stable and take a little bit more computation time when handled by the physics engine. It allows for a more general geometry (only requirement: it need to be convex) than pure shapes. If possible, use convex shapes for items that are sporadically in contact with other items (e.g. the various links of a robot). Convex shapes can be generated with [Menu bar --&gt; Add --&gt; Convex hull of selection] or with [Menu bar --&gt; Edit --&gt; Morph selection into convex shapes].</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#convexShapes"><strong><span>凸形形狀</span></strong></a></span>：當物理引擎處理時，凸形狀會稍微不穩定一點，並且需要多一點的計算時間。它允許更一般的幾何形狀（僅要求：它需要凸）而不是純形狀。如果可能，對偶爾與其他專案接觸的專案（例如機器人的各種連結）使用凸形形狀。可以使用 [功能表列 -- &gt; 添加 --gt; 選擇的凸包]或使用 [功能表列 -- &gt; 編輯 --&gt; 將選擇轉換為凸形形狀]生成凸形形狀。</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#convexShapes"><strong>Compound convex shapes, or convex decomposed shapes</strong></a></span>: a convex decomposed shape is a grouping of several convex shapes. It performs almost as well as convex shapes and shares similar properties. Convex decomposed shapes can be generated by grouping several convex shapes [Menu bar --&gt; Edit --&gt; Grouping/Merging --&gt; Group selected shapes], with [Menu bar --&gt; Add --&gt; Convex decomposition of selection...], or with [Menu bar --&gt; Edit --&gt; Morph selection into its convex decomposition...].</li>
</ul>
<p> </p>
<ul>
<li><span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#convexShapes"><strong><span>複合凸形或凸分解形狀</span></strong></a></span>：凸分解形狀是多個凸形形狀的分組。它的性能幾乎與凸形狀一樣好，並且具有類似的屬性。可以通過對多個凸形形狀進行分組[功能表條 --&gt; 編輯 -- &gt; 分組/合併 -- &gt; 組選定形狀]生成，使用 [功能表列 -- &gt; 添加 --&gt; 選擇的凸分解...]，或者使用 [功能表列 -- &gt; 編輯 -- &gt; 變形選擇到其凸分解中...]。</li>
</ul>
<p> </p>
<ul>
<li><strong>Random shapes</strong>: a random shape is a shape that is not convex nor pure. It generally has poor performance (calculation speed and stability). Avoid using random shapes as much as possible.</li>
</ul>
<p> </p>
<ul>
<li><strong>隨機形狀</strong>：隨機形狀是不凸或純的形狀。它的性能通常較差（計算速度和穩定性）。儘量避免使用隨機形狀。</li>
</ul>
<p> </p>
<p>So the order of preference would be: pure shapes, pure compound shapes, convex shapes, compound convex shapes, and finally random shapes. Make sure to also read <a href="http://www.coppeliarobotics.com/helpFiles/en/shapes.htm">this page</a>. In case of the robot we want to build, we will make the base of the robot as a pure cylinder, and the other links as convex or convex decomposed shapes.</p>
<p> </p>
<p>因此，偏好的順序是：純形狀、純複合形狀、凸形、複合凸形狀，最後是隨機形狀。請務必也閱讀<a href="http://www.coppeliarobotics.com/helpFiles/en/shapes.htm"><span>此頁面</span></a>。在我們想要構建的機器人的情況下，我們將機器人的底座作為一個純圓柱體，其他連結作為凸或凸分解的形狀。</p>
<p> </p>
<p>We could use the dynamically enabled shapes also as the visible parts of the robot, but that would probably not look good enough. So instead, we will build for each visible shape we have created in <a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm#visibleShapes">the first part of the tutorial</a> a dynamically enabled counterpart, which we will keep hidden: the hidden part will represent the dynamic model and be exclusively used by the physics engine, while the visible part will be used for visualization, but also for <a href="http://www.coppeliarobotics.com/helpFiles/en/distanceCalculation.htm">minimum distance calculations</a>, <a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensors.htm">proximity sensor detections</a>, etc.</p>
<p> </p>
<p>我們可以將動態啟用的形狀用作機器人的可見部分，但可能看起來不夠好。因此，我們將為在<a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm#visibleShapes"><span>本教程的第一部分</span></a>中創建的每個可見形狀構建一個動態啟用的對應形狀，我們將隱藏該形狀：隱藏部分將表示動態模型，並由物理引擎獨佔使用，而可見部分將用於視覺化，但也用於<a href="http://www.coppeliarobotics.com/helpFiles/en/distanceCalculation.htm"><span>最小距離計算</span></a>、<a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensors.htm"><span>接近感應器檢測</span></a>等。</p>
<p>We select object <em>robot</em>, copy-and-paste it into a new scene (in order to keep the original model intact) and start the <a href="http://www.coppeliarobotics.com/helpFiles/en/triangleEditMode.htm">triangle edit mode</a>. If object <em>robot</em> was a compound shape, we would first have had to ungroup it ([Menu bar --&gt; Edit --&gt; Grouping/Merging --&gt; Ungroup selected shapes]) then merge the individual shapes ([Menu bar --&gt; Edit --&gt; Grouping/Merging --&gt; Merge selected shapes]) before being able to start the triangle edit mode. Now we select the few triangles that represent the power cable, and erase them. Then we select all triangles in that shape, and click Extract cylinder. We can now leave the edit mode and we have our base object represented as a pure cylinder:</p>
<p> </p>
<p>我們選擇物件<em>機器人</em>，複製並粘貼到一個新的場景（為了保持原始模型不變），並開始<a href="http://www.coppeliarobotics.com/helpFiles/en/triangleEditMode.htm"><span>三角形編輯模式</span></a>。如果物件<em>機器人</em>是複合形狀，我們首先必須取消群組它（[功能表列 -- &gt; 編輯 --&gt; 分組/合併 -- &gt; 取消組選定形狀]），然後合併單個形狀（[功能表列 -- &gt; 編輯 --&gt; 分組/合併 -- &gt; 合併所選形狀]），然後才能啟動三角形編輯模式。現在，我們選擇表示電源線的幾個三角形，並擦除它們。然後，我們選擇該形狀中的所有三角形，然後按一下"提取圓柱體"。我們現在可以離開編輯模式，並將基本物件表示為純圓柱體：</p>
<p>We rename the new shape (with a double-click on its name in the <a href="http://www.coppeliarobotics.com/helpFiles/en/userInterface.htm#SceneHierarchy">scene hierarchy</a>) as <em>robot_dyn</em>, assign it to visibility layer 9, then copy it to the original scene. The rest of the links will be modelled as convex shapes, or compound convex shapes. We now select the first mobile link (i.e. object <em>robot_link1</em>) and generate a convex shape from it with [Menu bar --&gt; Add --&gt; Convex hull of selection].</p>
<p>我們將新形狀（在<a href="http://www.coppeliarobotics.com/helpFiles/en/userInterface.htm#SceneHierarchy"><span>場景層次結構</span></a>中按兩下其名稱）重命名為<em>robot_dyn，</em>將其分配給可見度層 9，然後將其複製到原始場景。其餘連結將建模為凸形或複合凸形。現在，我們選擇第一個手機連結（即物件<em>robot_link1），</em>並生成一個凸形形狀，從它與 [功能表列 -- &gt; 添加 -&gt; 凸面選擇包]。</p>
<p></p>
<p></p>
<p></p>
<p>DEF-USE Mechanism</p>
<p>DEF-USE 機制</p>
<p>The <strong>DEF-USE mechanism</strong> allows to define a node in one place and to reuse that definition elsewhere in the scene tree. This is useful to avoid the duplication of identical nodes in world files. Moreover, it also allows users to modify several objects at the same time. Here is how it works: first a node is labeled with a DEF string. Then copies of this node can be reused elsewhere with the USE keyword. Only the fields of the DEF node can be edited, the fields of the USE inherit from the DEF node and cannot be changed. This mechanism is dependent on the order of the nodes in the world file. A DEF node should be defined before any corresponding USE node.</p>
<p><span> </span></p>
<p><strong>DEF-USE </strong><strong>機制</strong>允許在一個位置定義節點，並在場景樹的其他位置重用該定義。這對於避免世界檔中相同節點的重複非常有用。此外，它還允許使用者同時修改多個物件。下面是它的工作原理：首先，節點用<span> DEF </span>字串標記。然後，此節點的副本可以使用<span> USE </span>關鍵字在其他地方重用。只能編輯<span> DEF </span>節點的欄位，<span>USE </span>的欄位從<span> DEF </span>節點繼承，不能更改。此機制取決於世界檔中節點的順序。應在任何相應的<span> USE </span>節點之前定義<span> DEF </span>節點。</p>
<p>The two <span><a href="https://cyberbotics.com/doc/reference/sphere">Sphere</a></span> definitions that we have used earlier to define the ball, are redundant. We will now merge these two <span><a href="https://cyberbotics.com/doc/reference/sphere">Spheres</a></span> into only once using the DEF-USE mechanism.</p>
<p> </p>
<p><span><a href="https://cyberbotics.com/doc/reference/sphere"> </a></span>我們之前用於定義球的兩個球體定義是多餘的。現在，我們將使用<span> DEF-USE </span>機制僅將這兩個<span><a href="https://cyberbotics.com/doc/reference/sphere"><span>球體</span></a></span>合併為一次。</p>
<p><strong>Hands-on #6</strong>: Select the first <a href="https://cyberbotics.com/doc/reference/sphere">Sphere</a> node (the child of the <a href="https://cyberbotics.com/doc/reference/shape">Shape</a>) in the scene tree view. The <a href="https://cyberbotics.com/doc/guide/the-scene-tree#field-editor">field editor</a> of the scene tree view allows you to enter the DEF string.</p>
<p> </p>
<p><strong>動手</strong>#6：在場景樹狀檢視中選擇第一個<a href="https://cyberbotics.com/doc/reference/sphere"><span>球體</span></a>節點（<a href="https://cyberbotics.com/doc/reference/shape"><span>形狀</span></a>子節點）。 <a href="https://cyberbotics.com/doc/guide/the-scene-tree#field-editor"> </a>場景樹狀檢視的欄位編輯器允許您輸入<span> DEF </span>字串。</p>
<ol>
<li>Enter BALL_GEOMETRYin this field.</li>
<li>在此欄位中輸入BALL_GEOMETRY。</li>
<li>Select the boundingObjectfield (containing the second <a href="https://cyberbotics.com/doc/reference/sphere">Sphere</a> node), and empty it by right clicking the field in the scene tree and choosing the Delete entry in the context menu that pops up.</li>
<li>選擇邊界物件欄位（包含第二個 <a href="https://cyberbotics.com/doc/reference/sphere">Sphere</a> 節點），然後通過按右鍵場景樹中的欄位並在彈出的內容功能表中選擇"刪除"條目來清空該欄位。</li>
<li>Then, select the boundingObjectfield and click on the Add button, and select the USE / BALL_GEOMETRY in the dialog box.</li>
<li>然後，選擇"邊界物件<span>"</span>欄位並按一下"添加<span>"</span>按鈕，然後在對話方塊中選擇"使用<span>/BALL_GEOMETRY"</span>。</li>
<li>The result is shown in <a href="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment#def-use-mechanism-on-the-sphere-node-called-ball_geometry">this figure</a>.</li>
<li>結果如下<a href="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment#def-use-mechanism-on-the-sphere-node-called-ball_geometry"><span>圖</span></a>所示。</li>
</ol>
<h1>note</h1>
<h2><span>指令備忘錄</span></h2>
<p><span>利用 git pull origin master 定時跟新 cmsimde</span></p>
<p>git status 檢查各版本的版號</p>
<p>git chackout 推回去各版本的版號</p>
<p></p>
<h2 class="title style-scope ytd-video-primary-info-renderer"><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style="">將Solvespace嵌入網頁</yt-formatted-string></h2>
<p>1. 先將檔案轉乘 Html</p>
<p>2. 把檔案複製到自己倉儲的 Downloads</p>
<p>3. 開啟自己的近端</p>
<p>4. 到 File List 點選檔案且複製自己的網址</p>
<p>5. 進入 Edit All 開啟自已的程式碼</p>
<p>6. 找尋要加入的段落並把網址貼上</p>
<p>7. 儲存後確認自己的近端和遠端有無成功嵌入</p>
<p></p>
<p><span>影片請開 youtube  C C  字幕</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GKnhYdRu4K8" width="560"></iframe></p>
<h2 class="title style-scope ytd-video-primary-info-renderer"><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style="">將Solvespace嵌入網頁</yt-formatted-string></h2>
<p>用stl轉檔嵌入至網頁</p>
<p>影片來源四設二甲 張永詮  </p>
<p>網址  https://youtu.be/El6c7X2sNtc</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/El6c7X2sNtc" width="560"></iframe></p>
<p></p>
<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>